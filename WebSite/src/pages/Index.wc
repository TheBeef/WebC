<?wc
/*******************************************************************************
 * FILENAME: Index.wc
 *
 * PROJECT:
 *    WebC
 *
 * FILE DESCRIPTION:
 *    
 *
 * COPYRIGHT:
 *    Copyright (C) 2020  Paul Hutchinson
 *
 *    This file is part of WebC.
 *
 *    This WebC is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 *
 * CREATED BY:
 *    Paul Hutchinson (24 Jul 2020)
 *
 ******************************************************************************/

#include "Pages.h"
#include "pages/header.h"
#include "Utils.h"
#include <stdio.h>

void Page_Index(void)
{
    StartPage(NULL,NULL);
?>

<p>WebC is a new open source C extension language that is especially suited
for web development in the C programming language for embedded systems.  It is
C code embedded into HTML markup, that is then converted to standard C code,
and then compiled with a normal C compiler.</p>

<p>An example is worth a 1000 words so:</p>

<h3>Example #1 An introductory example</h3>

<p>We start with a WebC program.  This is a mix of HTML and C code.</p>
<p>example.wc:</p>
<pre class='code'>
<?wc
const char *MainExHTML= =?>
`wc
#include <stdio.h>

int i;
char buff[100];
?>
<!DOCTYPE html>
<html>
    <head>
        <title>WebC</title>
    </head>
    <body>
        <h1>Hi, I'm a WebC program!</h1>
        <pre>
        `wc
            for(i=1;i<12;i++)
            {
                sprintf(buff,"%d x 9 = %d\n",i,i*9);
                wcecho(buff);
            }
        ?>
        </pre>
    </body>
</html>
<? ;
OutputHTMLExampleCode(MainExHTML);
?>
</pre>

<p>We then compile this with WebC using <span class='code'>webcc example.wc</span>, which makes the following C code.</p>
<p>example.c:</p>
<pre class='code'>
<?wc
const char *MainExCode= =?>
/*** GENERATED CODE FROM example.wc ***/
#include "WCWebAPI.h"
#include <stdio.h>

int i;
char buff[100];

void Page_example(void)
{
    wcecho("<!DOCTYPE html>\n"
        "<html>\n"
        "    <head>\n"
        "        <title>WebC</title>\n"
        "    </head>\n"
        "    <body>\n"
        "        <h1>Hi, I\'m a WebC program!</h1>\n"
        "        <pre>\n"
        "        ");
    for(i=1;i<12;i++)
    {
        sprintf(buff,"%d x 9 = %d\n",i,i*9);
        wcecho(buff);
    }
    wcecho("        </pre>\n"
        "    </body>\n"
        "</html>\n"
        "");
}
<? ;
OutputHTMLExampleCode(MainExCode);
?>
</pre>

<p>Next we compile the example.c file with a standard C compiler (you do need
to provide the main(), wcecho() and WCWebAPI.h for it to link).</p>

<p>When we run the executable it will output in the following HTML:</p>
<pre class='code'>
<?wc
const char *MainExOutput= =?>
<!DOCTYPE html>
<html>
    <head>
        <title>WebC</title>
    </head>
    <body>
        <h1>Hi, I'm a WebC program!</h1>
        <pre>
            1 x 9 = 9
            2 x 9 = 18
            3 x 9 = 27
            4 x 9 = 36
            5 x 9 = 45
            6 x 9 = 54
            7 x 9 = 63
            8 x 9 = 72
            9 x 9 = 81
            10 x 9 = 90
            11 x 9 = 99
        </pre>
    </body>
</html>

<? ;
OutputHTMLExampleCode(MainExOutput);
?>
</pre>

<h3>Tada!</h3>

<p>As you can see instead of lots of commands to output HTML (as seen in
normal C), WebC pages contain HTML with embedded C code that does
"something" (in this case, output the nine times table). The WebC code is
enclosed in special start and end processing instructions &lt;?wc and ?&gt;
that allow you to jump into and out of "C mode".</p>

<p>What distinguishes WebC from other script languages (like PHP) is that it
is compiled C code (or C++ if you like that better).  This is great for limited
resource embedded applications where code size and speed are important.</p>

<p>The best thing in using WebC is that it makes working with HTML
in C <b>bearable</b>.</p>

<p>Read the <? OutputLinkWithAnchor(e_Page_Documentation,"Chap_Intro","Intro"); ?>
 for a more detailed description of how to write WebC code.</p>

<p>Also check out the <? OutputLink(e_Page_Examples,"Examples"); ?> to
see different things WebC can do.</p>

<h2>Support files</h2>

<p>Here are the support files needed to make the above example actually compile
and run.  It only prints the output to stdout but by changing wcecho() you
can do anything you like with it.</p>

<p>main.c</p>
<pre class='code'>
<?wc
const char *MainExSupportFilesMain= =?>
#include <stdio.h>

void Page_example(void);

int main(void)
{
    Page_example();
    return 0;
}

void wcecho(const char *str)
{
    printf("%s",str);
}

<? ;
OutputHTMLExampleCode(MainExSupportFilesMain);
?>
</pre>

<p>WCWebAPI.h</p>
<pre class='code'>
<?wc
const char *MainExSupportFilesWCWebAPI= =?>
void wcecho(const char *str);
<? ;
OutputHTMLExampleCode(MainExSupportFilesWCWebAPI);
?>
</pre>


<?
    EndPage();
}
