<?
/*******************************************************************************
 * FILENAME: header.wc
 *
 * PROJECT:
 *    WebC
 *
 * FILE DESCRIPTION:
 *    This support file for the headers on the web page.
 *
 * COPYRIGHT:
 *    Copyright (C) 2020  Paul Hutchinson
 *
 *    This file is part of WebC.
 *
 *    This WebC is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 *
 * CREATED BY:
 *    Paul Hutchinson (24 Jul 2020)
 *
 ******************************************************************************/

#include "Pages.h"
#include "pages/header.h"
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <stdio.h>

void OutputBreadCrumbs(e_PageType CurPage,bool First);
void OutputTrackingCode(void);

char *m_TrackingCode=NULL;

void StartPage(const char *ExtraHEAD,const char *OverrideTitle)
{
    wcecho("<!DOCTYPE HTML>\n");
    wcecho("<html>\n");
    wcecho("<head>\n");
    if(ExtraHEAD!=NULL)
        wcecho(ExtraHEAD);
    wcecho("<title>");
    if(OverrideTitle!=NULL)
        wcecho(OverrideTitle);
    else
        wcecho(g_Pages[g_PageID].Title);
    if(strcmp(g_Pages[g_PageID].Title,"WebC")!=0)
        wcecho(" - WebC");
    wcecho("</title>");
    wcecho("<link rel = \"stylesheet\" type = \"text/css\" href = \"/css/MainCSS.css\" />\n");
    OutputTrackingCode();
?>
</head>
<body>
<div class='MainHeader'>
<ul>
    <li><? OutputLink(e_Page_Index,"Home");?></li>
    <li><? OutputLink(e_Page_Documentation,"Documentation");?></li>
    <li><? OutputLink(e_Page_Examples,"Examples");?></li>
    <li><? OutputLink(e_Page_Downloads,"Downloads");?></li>
    <li><? OutputLink(e_Page_License,"License");?></li>
    <li><? OutputLink(e_Page_Links,"Links");?></li>
    <li><? OutputLink(e_Page_About,"About");?></li>
    <li><? OutputLink(e_Page_Contact,"Contact");?></li>
</ul>
</div>
<div class='BreadCrumbs'>
<? OutputBreadCrumbs(g_PageID,true); ?>
</div>
<div class="MainBody">
<h1><?=g_Pages[g_PageID].Title ?></h1>
<?
}

void EndPage(void)
{
    wcecho("</div>\n");
    wcecho("</body>\n");
    wcecho("</html>\n");
}

void OutputBreadCrumbs(e_PageType CurPage,bool First)
{
    if(CurPage==e_PageMAX)
        return;

    OutputBreadCrumbs(g_Pages[CurPage].Parent,false);

    if(!First)
    {
        OutputLink(CurPage,g_Pages[CurPage].Title);
        wcecho(" &#187; ");
    }
    else
    {
        wcecho(g_Pages[CurPage].Title);
    }
}

/*******************************************************************************
 * NAME:
 *    OutputTrackingCode
 *
 * SYNOPSIS:
 *    void OutputTrackingCode(void);
 *
 * PARAMETERS:
 *    NONE
 *
 * FUNCTION:
 *    This function outputs the tracking code that was loaded at startup.
 *    If the tracking code could not be loaded this does nothing.
 *
 * RETURNS:
 *    NONE
 *
 * SEE ALSO:
 *    
 ******************************************************************************/
void OutputTrackingCode(void)
{
    if(m_TrackingCode!=NULL)
        wcecho(m_TrackingCode);
}

/*******************************************************************************
 * NAME:
 *    TrackingCodeInit
 *
 * SYNOPSIS:
 *    void TrackingCodeInit(void);
 *
 * PARAMETERS:
 *    NONE
 *
 * FUNCTION:
 *    Loads the tracking code from "TrackingCode.txt" into 'm_TrackingCode'
 *
 * RETURNS:
 *    NONE
 *
 * SEE ALSO:
 *    
 ******************************************************************************/
void TrackingCodeInit(void)
{
    FILE *in;
    int Size;

    in=fopen("TrackingCode.txt","rb");
    if(in==NULL)
        return;

    fseek(in,0,SEEK_END);
    Size=ftell(in);
    fseek(in,0,SEEK_SET);
    m_TrackingCode=malloc(Size+1);
    if(m_TrackingCode==NULL)
    {
        fclose(in);
        return;
    }
    if(fread(m_TrackingCode,Size,1,in)!=1)
    {
        free(m_TrackingCode);
        fclose(in);
        m_TrackingCode=NULL;
        return;
    }
    fclose(in);
}

/*******************************************************************************
 * NAME:
 *    TrackingCodeFree
 *
 * SYNOPSIS:
 *    void TrackingCodeFree(void);
 *
 * PARAMETERS:
 *    NONE
 *
 * FUNCTION:
 *    Frees the tracking code that was loaded with TrackingCodeInit()
 *
 * RETURNS:
 *    NONE
 *
 * SEE ALSO:
 *    
 ******************************************************************************/
void TrackingCodeFree(void)
{
    free(m_TrackingCode);
}

?>